//Program 2

//Tristan Sizik
//818006833
//3.13.2018

//Professor Riggins 

package data_structures;
import java.util.Iterator;
import java.util.NoSuchElementException;
import data_structures.OrderedLinkedListPriorityQueue.IteratorHelper;

public class UnorderedLinkedListPriorityQueue<E extends Comparable<E>> implements PriorityQueue<E>{
	private int currSize = 0;
	private Node<E> head = null;
	private Node<E> tail = null;
	private Node<E> tracker = null;
	
	private class Node<E>{
		public Node<E> next;
		public E data;
		
		public Node(E obj)
		{
			next = null;
			data = obj;
		}
	}
	
	//Default Constructor
	public UnorderedLinkedListPriorityQueue()
	{
		head = tail;
		currSize = 0;
	}
	
	//  Inserts a new object into the priority queue.  Returns true if
    //  the insertion is successful.  If the PQ is full, the insertion
    //  is aborted, and the method returns false.
    public boolean insert(E object)
    {
    	//no need for "isFull" method, never full!
    	Node<E> newVal = new Node<E>(object);
    	
    	if(isEmpty())
    	{
    		head = newVal;
    		tail = head;
    		currSize++;
    		return true;
    	}   	
    	//value before tail is the freshest input.
    	
    	tail.next = newVal;
    	tail = newVal;
    	currSize++;
    	return true;
    	
    }
   
    //  Removes the object of highest priority that has been in the
    //  PQ the longest, and returns it.  Returns null if the PQ is empty.
    public E remove()
    {
    	if(isEmpty())
    		return null;
    	
    	tracker = head;
    	Node<E> removeTracker = tracker;
    	E temp = removeTracker.data;
    	
    	//Tracker used in order to track the point of highest priority;
    	
    	//must go through all of list in order to find worst case scenerio i.e. 1 being in very back of list
    	while(tracker != tail)
    	{		
    		if( ( (Comparable<E>)tracker.next.data).compareTo(temp) < 0)
    		{
    			removeTracker = tracker;					//gets node before value to be removed and saved that value to temp
    			temp = removeTracker.next.data;				//so removal is easier and O(n) is complexity.
    		}
    		tracker = tracker.next;
    	}
    	
    	if(head == tail)									//only 1 item in LL.
    	{
    		tail = null;
    		head = tail;
    		currSize--;
    		return temp;
    	}
    	
    	if(removeTracker == head && ( (Comparable<E>)removeTracker.data).compareTo(removeTracker.next.data) <= 0)
    	{
    		head = head.next;								//delete from head
    		currSize--;
    		return temp;
    	}
    	
    	if(removeTracker.next == tail)						//delete from tail
    	{
    		tail = removeTracker;
    		tail.next = null;
    		currSize--;
    		return temp;
    	}
    	
    	removeTracker.next = removeTracker.next.next;		//default
    	currSize--;
    	return temp;
    	
    }
    
    //  Deletes all instances of the parameter obj from the PQ if found, and
    //  returns true.  Returns false if no match to the parameter obj is found.
    public boolean delete(E obj)
    {
    	boolean flag = false;
    	
    	if(isEmpty())
    		return false;
    	
    	tracker = head;
    	Node<E> n1 = tracker;  	
    	
    	//must look through the whole linked list in case worst case scenario the value might be the last one inputted.
    	//essentially same thing yet we have no stopping point and not all equal values will be bunched together.
    	//		(n1 stays put and links with tracker when tracker finds the value that does not equal after a series.
    	
    	while(tracker.next != null)
    	{
    		if( tracker == head && ( (Comparable<E>)tracker.data).compareTo(obj) == 0)	//replace head.
    		{
    			flag = true;
    			currSize--;
    			while( tracker.next != null && ( (Comparable<E>)tracker.next.data).compareTo(obj) == 0)
    			{
    				tracker = tracker.next;
    				currSize--;
    			}
    			if(tracker == tail)
    				{
    				tail = null;
    				head = tail;														//head to tail case
    				return flag;
    				}
    			head = tracker.next;
    		}
    		
    		if( tracker.next != null && ( (Comparable<E>)tracker.next.data).compareTo(obj) == 0)		//we found an equal value, give to n1 pointer
    		{
    			flag = true;
    			n1 = tracker;
    			tracker = tracker.next;
    			currSize--;
    			while( tracker.next != null && ( (Comparable<E>)tracker.next.data).compareTo(obj) == 0)
    			{
    				tracker = tracker.next;
    				currSize--;
    			}
    			if(tracker == tail)
    			{
    				tail = n1;
    				return flag;
    			}
    			n1.next = tracker.next;
    		}
    		
    		tracker = tracker.next;
    	}
    	
    	return flag;
    }
   
    //  Returns the object of highest priority that has been in the
    //  PQ the longest, but does NOT remove it. 
    //  Returns null if the PQ is empty.
    public E peek()
    {
    	if(isEmpty())
    		return null;
    	
    	Node<E> highestPriority = head;
    	tracker = head;
    	
    	while(tracker != tail)
    	{
    		if( ( (Comparable<E>)tracker.data).compareTo(highestPriority.data) < 0)
        	{
        		highestPriority = tracker;
        	}
    		tracker = tracker.next;
    	}
    	
    	return highestPriority.data;
    }
    
    //  Returns true if the priority queue contains the specified element
    //  false otherwise.
    public boolean contains(E obj)
    {
    	if(isEmpty())
    		return false;
    	
    	tracker = head;
    	
    	for( int i = 0; i< currSize ; i++)
    	{
    		if( ( (Comparable<E>)tracker.data).compareTo(obj) == 0)
    		{
    			return true;
    		}
    		tracker = tracker.next;
    	}
    	
    	return false;
    }
   
    //  Returns the number of objects currently in the PQ.
    public int size()
    {
    	return currSize;
    }
      
    //  Returns the PQ to an empty state.
    public void clear()
    {
    	head = null;
    	tail = head;
    	currSize = 0;
    }
   
    //  Returns true if the PQ is empty, otherwise false
    public boolean isEmpty()
    {
    	return head == null;
    }
   
    //  Returns true if the PQ is full, otherwise false.  List based
    //  implementations should always return false.
    public boolean isFull()
    {
    	return false; //a linked list is never full, unlimited space!
    }
    
    //  Returns an iterator of the objects in the PQ, in no particular
    //  order.  
    
    public Iterator<E> iterator()
    {
    	return (Iterator<E>) new IteratorHelper<E>();
    }
	
    class IteratorHelper<E> implements Iterator<E> 
    {
    	 
    	public IteratorHelper() {
    		tracker = head;
    	}
    	 
    	public E next() {
    		if (!hasNext())
    			throw new NoSuchElementException();
    		tracker = tracker.next;
    		return (E) tracker.data;
    	}
    	
    	public boolean hasNext() {
    		return tracker != tail;
    	}
    	 
    	public void remove() {
    		throw new UnsupportedOperationException();
    	}
     }
	
}